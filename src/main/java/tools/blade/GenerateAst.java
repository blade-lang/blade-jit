package tools.blade;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {

  public static void main(String[] args) throws IOException {
    if (args.length < 1) {
      System.err.println("Usage: generate_ast <output_dir> [type?]");
      System.exit(1);
    }

    String outputDir = args[0].trim();
    String type = "all";
    if(args.length == 2) {
      type = args[1].trim();
    }

    if (type.equalsIgnoreCase("expr")) {
      defineAst(outputDir, "Expr", EXPR_DEFINITION);
    } else if (type.equalsIgnoreCase("stmt")) {
      defineAst(outputDir, "Stmt", STMT_DEFINITION);
    } else {
      defineAst(outputDir, "Expr", EXPR_DEFINITION);
      defineAst(outputDir, "Stmt", STMT_DEFINITION);
    }
  }

  private static final List<String> EXPR_DEFINITION = Arrays.asList(
      "Nil                :",
      "Boolean            : boolean value",
      "Number             : Token token",
      "Literal            : Token token",
      "Unary              : Token op, Expr right",
      "Binary             : Expr left, Token op, Expr right",
      "Logical            : Expr left, Token op, Expr right",
      "Range              : Expr lower, Expr upper",
      "Grouping           : Expr expression",
      "Identifier         : Token token",
      "Condition          : Expr expression, Expr truth, Expr falsy",
      "Call               : Expr callee, List<Expr> args",
      "Get                : Expr expression, Identifier name",
      "Set                : Expr expression, Identifier name, Expr value",
      "Index              : Expr callee, List<Expr> arguments",
      "Array              : List<Expr> items",
      "Dict               : List<Expr> keys, List<Expr> values",
      "New                : Expr expression, List<Expr> arguments",
      "Parent             :",
      "Self               :",
      "Assign             : Expr expression, Expr value",
      "Anonymous          : Stmt.Function function"
  );

  private static final List<String> STMT_DEFINITION = Arrays.asList(
      "Echo       : Expr value",
      "Expression : Expr expression",
      "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
      "Iter       : Stmt declaration, Expr condition, Expression interation, Block body",
      "While      : Expr condition, Stmt body",
      "DoWhile    : Stmt body, Expr condition",
      "For        : List<Expr.Identifier> variables, Expr iterable, Stmt body",
      "Continue   :",
      "Break      :",
      "Raise      : Expr exception",
      "Return     : Expr value",
      "Assert     : Expr expression, Expr message",
      "Using      : Expr expression, List<Expr> caseLabels, List<Stmt> caseBodies, Stmt defaultCase",
      "Import     : String path, List<Token> elements, boolean all",
      "Catch      : Block body, Block catchBody, Block finallyBody, Expr.Identifier name",
      "Block      : List<Stmt> body",
      "Assign     : Expr expression, Token type, Expr value",
      "Var        : Token name, Expr value, boolean isConstant",
      "Function   : Token name, List<Expr.Identifier> parameters, Stmt.Block body, boolean isVariadic",
      "Method     : Token name, List<Expr.Identifier> parameters, Stmt.Block body, boolean isVariadic, boolean isStatic",
      "Property   : Token name, Expr value, boolean isStatic, boolean isConstant",
      "Class      : Token name, Expr.Identifier superclass, List<Property> properties, List<Method> methods, List<Method> operators",
      "VarList    : List<Stmt> declarations"
  );

  private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {

    String path = outputDir + "/" + baseName + ".java";
    PrintWriter writer = new PrintWriter(path, "UTF-8");

    writer.println("// DO NOT MODIFY DIRECTLY");
    writer.println("// This file was generated by the tools.rem.GenerateAst");
    writer.println("package org.blade.language.parser.ast;");
    writer.println();
    writer.println("import org.blade.language.parser.Token;");
    writer.println("import java.util.List;");
    writer.println();
    writer.println("public abstract class " + baseName + " extends AST {");

    // The base accept method.
    writer.println("  public abstract<T> T accept(Visitor<T> visitor);");

    defineVisitor(writer, baseName, types);

    // The AST classes
    for (String type : types) {
      String[] brokenType = type.split(":");

      String className = brokenType[0].trim();

      String fields = "";
      if (brokenType.length > 1)
        fields = brokenType[1].trim();

      defineType(writer, baseName, className, fields);
    }

    writer.println("}");
    writer.close();
  }

  private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
    writer.println();
    writer.println("  public interface Visitor<T> {");
    for (String type : types) {
      String typeName = type.split(":")[0].trim();
      writer.println("    T visit" + typeName + baseName + "(" + typeName
          + " " + baseName.toLowerCase() + ");");
    }
    writer.println("    T visit" + baseName + "(" + baseName + " " + baseName.toLowerCase() + ");");
    writer.println("  }");
  }

  private static void defineType(PrintWriter writer, String baseName, String className, String fieldsList) {
    writer.println();
    writer.println("  public static class " + className + " extends " + baseName + " {");

    String[] fields = null;
    if (!fieldsList.isEmpty()) {
      fields = fieldsList.split(", ");

      // Fields.
      for (String field : fields) {
        writer.println("    public final " + field.trim() + ";");
      }
      writer.println();
    }

    // Constructor.
    writer.println("    public " + className + "(" + fieldsList + ") {");

    if (!fieldsList.isEmpty()) {
      // Store parameters in fields.
      for (String field : fields) {
        String name = field.split(" ")[1].trim();
        writer.println("      this." + name + " = " + name + ";");
      }
    }
    writer.println("    }");

    // Visitor pattern.
    writer.println();
    writer.println("    public <T> T accept(Visitor<T> visitor) {");
    writer.println("      return visitor.visit" + className + baseName + "(this);");
    writer.println("    }");

    writer.println("  }");

    System.out.println(className + " AST class generated.");
  }
}
