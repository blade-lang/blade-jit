// DO NOT MODIFY DIRECTLY
// This file was generated by the tools.rem.GenerateAst
package org.blade.language.parser.ast;

import org.blade.language.parser.Token;
import java.util.List;

public abstract class Stmt extends AST {
  public abstract<T> T accept(Visitor<T> visitor);

  public interface Visitor<T> {
    T visitEchoStmt(Echo stmt);
    T visitExpressionStmt(Expression stmt);
    T visitIfStmt(If stmt);
    T visitIterStmt(Iter stmt);
    T visitWhileStmt(While stmt);
    T visitDoWhileStmt(DoWhile stmt);
    T visitContinueStmt(Continue stmt);
    T visitBreakStmt(Break stmt);
    T visitRaiseStmt(Raise stmt);
    T visitReturnStmt(Return stmt);
    T visitAssertStmt(Assert stmt);
    T visitUsingStmt(Using stmt);
    T visitImportStmt(Import stmt);
    T visitCatchStmt(Catch stmt);
    T visitBlockStmt(Block stmt);
    T visitVarStmt(Var stmt);
    T visitFunctionStmt(Function stmt);
    T visitMethodStmt(Method stmt);
    T visitPropertyStmt(Property stmt);
    T visitClassStmt(Class stmt);
    T visitVarListStmt(VarList stmt);
    T visitStmt(Stmt stmt);
  }

  public static class Echo extends Stmt {
    public final Expr value;

    public Echo(Expr value) {
      this.value = value;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitEchoStmt(this);
    }
  }

  public static class Expression extends Stmt {
    public final Expr expression;

    public Expression(Expr expression) {
      this.expression = expression;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitExpressionStmt(this);
    }
  }

  public static class If extends Stmt {
    public final Expr condition;
    public final Stmt thenBranch;
    public final Stmt elseBranch;

    public If(Expr condition, Stmt thenBranch, Stmt elseBranch) {
      this.condition = condition;
      this.thenBranch = thenBranch;
      this.elseBranch = elseBranch;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitIfStmt(this);
    }
  }

  public static class Iter extends Stmt {
    public final Stmt declaration;
    public final Expr condition;
    public final Expression interation;
    public final Block body;

    public Iter(Stmt declaration, Expr condition, Expression interation, Block body) {
      this.declaration = declaration;
      this.condition = condition;
      this.interation = interation;
      this.body = body;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitIterStmt(this);
    }
  }

  public static class While extends Stmt {
    public final Expr condition;
    public final Stmt body;

    public While(Expr condition, Stmt body) {
      this.condition = condition;
      this.body = body;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitWhileStmt(this);
    }
  }

  public static class DoWhile extends Stmt {
    public final Stmt body;
    public final Expr condition;

    public DoWhile(Stmt body, Expr condition) {
      this.body = body;
      this.condition = condition;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitDoWhileStmt(this);
    }
  }

  public static class Continue extends Stmt {
    public Continue() {
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitContinueStmt(this);
    }
  }

  public static class Break extends Stmt {
    public Break() {
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitBreakStmt(this);
    }
  }

  public static class Raise extends Stmt {
    public final Expr exception;

    public Raise(Expr exception) {
      this.exception = exception;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitRaiseStmt(this);
    }
  }

  public static class Return extends Stmt {
    public final Expr value;

    public Return(Expr value) {
      this.value = value;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitReturnStmt(this);
    }
  }

  public static class Assert extends Stmt {
    public final Expr expression;
    public final Expr message;

    public Assert(Expr expression, Expr message) {
      this.expression = expression;
      this.message = message;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitAssertStmt(this);
    }
  }

  public static class Using extends Stmt {
    public final Expr expression;
    public final List<Expr> caseLabels;
    public final List<Stmt> caseBodies;
    public final Stmt defaultCase;

    public Using(Expr expression, List<Expr> caseLabels, List<Stmt> caseBodies, Stmt defaultCase) {
      this.expression = expression;
      this.caseLabels = caseLabels;
      this.caseBodies = caseBodies;
      this.defaultCase = defaultCase;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitUsingStmt(this);
    }
  }

  public static class Import extends Stmt {
    public final String path;
    public final List<Token> elements;
    public final boolean all;

    public Import(String path, List<Token> elements, boolean all) {
      this.path = path;
      this.elements = elements;
      this.all = all;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitImportStmt(this);
    }
  }

  public static class Catch extends Stmt {
    public final Block body;
    public final Block catchBody;
    public final Block finallyBody;
    public final Expr.Identifier name;

    public Catch(Block body, Block catchBody, Block finallyBody, Expr.Identifier name) {
      this.body = body;
      this.catchBody = catchBody;
      this.finallyBody = finallyBody;
      this.name = name;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitCatchStmt(this);
    }
  }

  public static class Block extends Stmt {
    public final List<Stmt> body;

    public Block(List<Stmt> body) {
      this.body = body;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitBlockStmt(this);
    }
  }

  public static class Var extends Stmt {
    public final Token name;
    public final Expr value;
    public final boolean isConstant;

    public Var(Token name, Expr value, boolean isConstant) {
      this.name = name;
      this.value = value;
      this.isConstant = isConstant;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitVarStmt(this);
    }
  }

  public static class Function extends Stmt {
    public final Token name;
    public final List<Expr.Identifier> parameters;
    public final Stmt.Block body;
    public final boolean isVariadic;

    public Function(Token name, List<Expr.Identifier> parameters, Stmt.Block body, boolean isVariadic) {
      this.name = name;
      this.parameters = parameters;
      this.body = body;
      this.isVariadic = isVariadic;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitFunctionStmt(this);
    }
  }

  public static class Method extends Stmt {
    public final Token name;
    public final List<Expr.Identifier> parameters;
    public final Stmt.Block body;
    public final boolean isVariadic;
    public final boolean isStatic;

    public Method(Token name, List<Expr.Identifier> parameters, Stmt.Block body, boolean isVariadic, boolean isStatic) {
      this.name = name;
      this.parameters = parameters;
      this.body = body;
      this.isVariadic = isVariadic;
      this.isStatic = isStatic;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitMethodStmt(this);
    }
  }

  public static class Property extends Stmt {
    public final Token name;
    public final Expr value;
    public final boolean isStatic;
    public final boolean isConstant;

    public Property(Token name, Expr value, boolean isStatic, boolean isConstant) {
      this.name = name;
      this.value = value;
      this.isStatic = isStatic;
      this.isConstant = isConstant;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitPropertyStmt(this);
    }
  }

  public static class Class extends Stmt {
    public final Token name;
    public final Expr.Identifier superclass;
    public final List<Property> properties;
    public final List<Method> methods;
    public final List<Method> operators;

    public Class(Token name, Expr.Identifier superclass, List<Property> properties, List<Method> methods, List<Method> operators) {
      this.name = name;
      this.superclass = superclass;
      this.properties = properties;
      this.methods = methods;
      this.operators = operators;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitClassStmt(this);
    }
  }

  public static class VarList extends Stmt {
    public final List<Stmt> declarations;

    public VarList(List<Stmt> declarations) {
      this.declarations = declarations;
    }

    public <T> T accept(Visitor<T> visitor) {
      return visitor.visitVarListStmt(this);
    }
  }
}
