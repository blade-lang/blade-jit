plugins {
    id 'me.champeau.jmh' version '0.7.3'
    id 'org.graalvm.buildtools.native' version '0.10.6'
}

group = 'org.blade'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.graalvm.truffle:truffle-tck:24.2.0'

    implementation 'org.graalvm.truffle:truffle-api:24.2.0'
    implementation 'org.graalvm.polyglot:polyglot:24.2.0'
    implementation 'org.graalvm.truffle:truffle-runtime:24.2.0'
    implementation 'org.graalvm.polyglot:inspect:24.2.0'

    annotationProcessor 'org.graalvm.truffle:truffle-dsl-processor:24.2.0'

    jmh 'org.openjdk.jmh:jmh-core:1.36'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
    jmhRuntimeOnly 'org.graalvm.truffle:truffle-sl:24.2.0'
    jmhRuntimeOnly 'org.graalvm.polyglot:polyglot:24.2.0'
    jmhRuntimeOnly 'org.graalvm.js:js:24.2.0'
}

test {
//    useJUnitPlatform()
}

tasks.register('jarWithDeps', Copy) {
    dependsOn 'jar'
    def conf = configurations.runtimeClasspath
    from conf.allDependencies.collect { conf.files(it) }
    from "${project.buildDir}/libs/${project.name}-${project.version}.jar"
    into "${project.buildDir}/modules"
}
build.dependsOn('jarWithDeps')

graalvmNative {
    binaries.all {
        // common options
        verbose = true
        resources.autodetect()
    }

    binaries.main {
        // options to configure the main binary
        imageName = 'blade'
        mainClass = 'org.blade.Main'

        fallback = true

        buildArgs.add('-O3')
        buildArgs.add('-march=native')
        buildArgs.add('-H:+AddAllCharsets')
        buildArgs.add('-H:MaxRuntimeCompileMethods=5400')
        buildArgs.add('-H:+UnlockExperimentalVMOptions')
        buildArgs.add('--initialize-at-build-time=org.blade')
        buildArgs.add('--enable-native-access=org.graalvm.truffle')
        buildArgs.add('--enable-native-access=org.graalvm.polyglot')
        buildArgs.add('-Dpolyglot.image-build-time.PreinitializeContexts=blade')
    }

    binaries.test {
        // options to configure the test binary
        quickBuild = true
        debug = true
    }
}